"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import ..k8s.apimachinery.pkg.apis.meta.v1


schema Permission:
    r"""
    A Permission is an API type.

    Attributes
    ----------
    apiVersion : str, default is "repository.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Permission", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : RepositoryUpboundIoV1alpha1PermissionSpec, default is Undefined, required
        spec
    status : RepositoryUpboundIoV1alpha1PermissionStatus, default is Undefined, optional
        status
    """


    apiVersion: "repository.upbound.io/v1alpha1" = "repository.upbound.io/v1alpha1"

    kind: "Permission" = "Permission"

    metadata?: v1.ObjectMeta

    spec: RepositoryUpboundIoV1alpha1PermissionSpec

    status?: RepositoryUpboundIoV1alpha1PermissionStatus


schema RepositoryUpboundIoV1alpha1PermissionSpec:
    r"""
    A PermissionSpec defines the desired state of a Permission.

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : RepositoryUpboundIoV1alpha1PermissionSpecForProvider, default is Undefined, required
        for provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : RepositoryUpboundIoV1alpha1PermissionSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : RepositoryUpboundIoV1alpha1PermissionSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : RepositoryUpboundIoV1alpha1PermissionSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: RepositoryUpboundIoV1alpha1PermissionSpecForProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: RepositoryUpboundIoV1alpha1PermissionSpecProviderConfigRef

    publishConnectionDetailsTo?: RepositoryUpboundIoV1alpha1PermissionSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: RepositoryUpboundIoV1alpha1PermissionSpecWriteConnectionSecretToRef


schema RepositoryUpboundIoV1alpha1PermissionSpecForProvider:
    r"""
    PermissionParameters are the configurable fields of a Permission.

    Attributes
    ----------
    organizationName : str, default is Undefined, required
        OrganizationName is the name of the organization to which the Permission belongs.
    permission : str, default is Undefined, required
        Permission is the permission to grant to the repository for an team.
    repository : str, default is Undefined, optional
        Repository of the repository to add the permission to. Either repository or repositoryRef or repositorySelector is required.
    repositoryRef : RepositoryUpboundIoV1alpha1PermissionSpecForProviderRepositoryRef, default is Undefined, optional
        repository ref
    repositorySelector : RepositoryUpboundIoV1alpha1PermissionSpecForProviderRepositorySelector, default is Undefined, optional
        repository selector
    teamId : str, default is Undefined, optional
        TeamID of the team to add the robot to. Either teamId or teamIdRef or teamIdSelector is required.
    teamIdRef : RepositoryUpboundIoV1alpha1PermissionSpecForProviderTeamIDRef, default is Undefined, optional
        team Id ref
    teamIdSelector : RepositoryUpboundIoV1alpha1PermissionSpecForProviderTeamIDSelector, default is Undefined, optional
        team Id selector
    """


    organizationName: str

    permission: "admin" | "read" | "write" | "view"

    repository?: str

    repositoryRef?: RepositoryUpboundIoV1alpha1PermissionSpecForProviderRepositoryRef

    repositorySelector?: RepositoryUpboundIoV1alpha1PermissionSpecForProviderRepositorySelector

    teamId?: str

    teamIdRef?: RepositoryUpboundIoV1alpha1PermissionSpecForProviderTeamIDRef

    teamIdSelector?: RepositoryUpboundIoV1alpha1PermissionSpecForProviderTeamIDSelector


    check:
        len(organizationName) >= 1


schema RepositoryUpboundIoV1alpha1PermissionSpecForProviderRepositoryRef:
    r"""
    RepositoryRef references a Repository to and retrieves its name.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : RepositoryUpboundIoV1alpha1PermissionSpecForProviderRepositoryRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: RepositoryUpboundIoV1alpha1PermissionSpecForProviderRepositoryRefPolicy


schema RepositoryUpboundIoV1alpha1PermissionSpecForProviderRepositoryRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepositoryUpboundIoV1alpha1PermissionSpecForProviderRepositorySelector:
    r"""
    RepositorySelector selects a reference to a Repository in order to retrieve its name.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : RepositoryUpboundIoV1alpha1PermissionSpecForProviderRepositorySelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: RepositoryUpboundIoV1alpha1PermissionSpecForProviderRepositorySelectorPolicy


schema RepositoryUpboundIoV1alpha1PermissionSpecForProviderRepositorySelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepositoryUpboundIoV1alpha1PermissionSpecForProviderTeamIDRef:
    r"""
    TeamIDRef references a Team to and retrieves its teamId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : RepositoryUpboundIoV1alpha1PermissionSpecForProviderTeamIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: RepositoryUpboundIoV1alpha1PermissionSpecForProviderTeamIDRefPolicy


schema RepositoryUpboundIoV1alpha1PermissionSpecForProviderTeamIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepositoryUpboundIoV1alpha1PermissionSpecForProviderTeamIDSelector:
    r"""
    TeamIDSelector selects a reference to a Team in order to retrieve its teamId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : RepositoryUpboundIoV1alpha1PermissionSpecForProviderTeamIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: RepositoryUpboundIoV1alpha1PermissionSpecForProviderTeamIDSelectorPolicy


schema RepositoryUpboundIoV1alpha1PermissionSpecForProviderTeamIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepositoryUpboundIoV1alpha1PermissionSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : RepositoryUpboundIoV1alpha1PermissionSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: RepositoryUpboundIoV1alpha1PermissionSpecProviderConfigRefPolicy


schema RepositoryUpboundIoV1alpha1PermissionSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepositoryUpboundIoV1alpha1PermissionSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : RepositoryUpboundIoV1alpha1PermissionSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : RepositoryUpboundIoV1alpha1PermissionSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: RepositoryUpboundIoV1alpha1PermissionSpecPublishConnectionDetailsToConfigRef

    metadata?: RepositoryUpboundIoV1alpha1PermissionSpecPublishConnectionDetailsToMetadata

    name: str


schema RepositoryUpboundIoV1alpha1PermissionSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : RepositoryUpboundIoV1alpha1PermissionSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: RepositoryUpboundIoV1alpha1PermissionSpecPublishConnectionDetailsToConfigRefPolicy


schema RepositoryUpboundIoV1alpha1PermissionSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepositoryUpboundIoV1alpha1PermissionSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema RepositoryUpboundIoV1alpha1PermissionSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema RepositoryUpboundIoV1alpha1PermissionStatus:
    r"""
    A PermissionStatus represents the observed state of a Permission.

    Attributes
    ----------
    atProvider : any, default is Undefined, optional
        PermissionObservation are the observable fields of a Permission.
    conditions : [RepositoryUpboundIoV1alpha1PermissionStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: any

    conditions?: [RepositoryUpboundIoV1alpha1PermissionStatusConditionsItems0]


schema RepositoryUpboundIoV1alpha1PermissionStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


